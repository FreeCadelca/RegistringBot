import telebot
from bot_token import *
from csv_functions import *
import csv
import datetime

bot = telebot.TeleBot(TOKEN)  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –Ω–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
days = {'M': '–ø–Ω',
        'T': '–≤—Ç',
        'W': '—Å—Ä',
        'Th': '—á—Ç',
        'F': '–ø—Ç',
        'Sa': '—Å–±',
        'Su': '–≤—Å'}

# todo: —Å–¥–µ–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
# todo: —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö (–∏ –∑–∞–Ω—è—Ç—ã—Ö) –≥—Ä—É–ø–ø
# todo: —Å–¥–µ–ª–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö —á–µ–ª–æ–≤
@bot.message_handler(commands=['start'])
def start(message):
    main_menu = create_home_menu()
    setState(message.chat.id, 'home')
    bot.send_message(message.chat.id,
                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}! \n'
                     f'–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n'
                     f'Ÿ©(‚óï‚Äø‚óïÔΩ°)€∂\n'
                     f'–î–ª—è –ø–æ–º–æ—â–∏ –ø–æ –±–æ—Ç—É –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help',
                     parse_mode='html', reply_markup=main_menu)


def create_home_menu():
    main_menu = telebot.types.ReplyKeyboardMarkup(True, False)
    main_menu.row('/start', '/help')
    main_menu.row('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ö–æ–±–±–∏', '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É')
    main_menu.row('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ö–æ–±–±–∏')
    main_menu.row('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã')
    return main_menu


@bot.message_handler(commands=['help'])
def give_help(message):
    bot.send_message(message.chat.id,
                     f'–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—à–∫–∞\n',
                     parse_mode='html')


@bot.message_handler(commands=['getstate'])
def get_state_command(message):
    bot.send_message(message.chat.id,
                     f'{getState(message.chat.id)}',
                     parse_mode='html')


@bot.message_handler(content_types=['text'])
def message_reply(message):
    if getState(message.chat.id) == 'home':
        match message.text:
            case '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ö–æ–±–±–∏':
                choose_hobby_handler(message)
            case '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É':
                make_an_appointment_with_doctor_handler(message)
            case '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ö–æ–±–±–∏':
                get_my_hobbies(message)
            case '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã':
                refuse_hobby(message)
    elif getState(message.chat.id) == 'choose_hobby':
        match message.text:
            case 'üé∏–ó–∞–Ω—è—Ç–∏—è –Ω–∞ –≥–∏—Ç–∞—Ä–µüé∏':
                choose_guitar_group(message)
            case 'üíÉ–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π –∫—Ä—É–∂–æ–∫üï∫':
                setState(message.chat.id, 'home')
                bot.send_message(message.chat.id,
                                 "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤–∞... –°–æ—Ä–∏(",
                                 parse_mode='html',
                                 reply_markup=create_home_menu())
    elif getState(message.chat.id) == 'refuse_hobby':
        match message.text:
            case '–ó–∞–Ω—è—Ç–∏—è –Ω–∞ –≥–∏—Ç–∞—Ä–µ':
                choose_guitar_group_to_refuse(message)
            case '–¢–∞–Ω—Ü—ã':
                setState(message.chat.id, 'home')
                bot.send_message(message.chat.id,
                                 "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤–∞... –°–æ—Ä–∏(",
                                 parse_mode='html',
                                 reply_markup=create_home_menu())


def refuse_hobby(message):
    setState(message.chat.id, 'refuse_hobby')

    choose_hobby_to_refuse = telebot.types.ReplyKeyboardMarkup(True, True)
    choose_hobby_to_refuse.row('–ó–∞–Ω—è—Ç–∏—è –Ω–∞ –≥–∏—Ç–∞—Ä–µ')
    choose_hobby_to_refuse.row('–¢–∞–Ω—Ü—ã')
    choose_hobby_to_refuse.row('/help')

    bot.send_message(message.chat.id,
                     f'–û—Ç –≥—Ä—É–ø–ø—ã –∫–∞–∫–æ–≥–æ —Ö–æ–±–±–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è?\n',
                     parse_mode='html', reply_markup=choose_hobby_to_refuse)


def choose_guitar_group_to_refuse(message):
    setState(message.chat.id, 'refuse_guitar_group')

    # —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    guitar_groups_already = []
    with open("Data/users.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        user_id = str(message.chat.id)
        for row in file_reader:
            if row["UserId"] == user_id and len(row["guitar"]) != 0:
                guitar_groups_already = row["guitar"].split(' ')
                break

    # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø –ø–æ –≥–∏—Ç–∞—Ä–µ
    if len(guitar_groups_already) == 0:
        setState(message.chat.id, 'home')
        bot.send_message(message.chat.id,
                         f'–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∑–∞–Ω—è—Ç–∏–π –ø–æ –≥–∏—Ç–∞—Ä–µ',
                         parse_mode='html', reply_markup=create_home_menu())
        return 0

    with open("Data/guitar_lessons.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        descriptions_of_groups = []
        groups = []
        for row in file_reader:
            # –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
            if row["Group"] in guitar_groups_already:
                descriptions_of_groups.append(f'–ì—Ä—É–ø–ø–∞ ‚Ññ{row["Group"]} '
                                              f'—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º {row["Teacher"]},\n'
                                              f'–ó–∞–Ω—è—Ç–∏—è –ø–æ {days[row["Day"]]} '
                                              f'–≤ {row["Time"]}, '
                                              f'{row["Fullness"]} –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ\n')
                groups.append(f'–ì—Ä—É–ø–ø–∞ ‚Ññ{row["Group"]}')
    buttons = telebot.types.InlineKeyboardMarkup()
    for group in groups:
        buttons.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f'{group[8:]} {message.chat.id}'))
    bot.send_message(message.chat.id,
                     f'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –≥—Ä—É–ø–ø:\n\n' +
                     '\n'.join(descriptions_of_groups),
                     parse_mode='html', reply_markup=buttons)


def get_my_hobbies(message):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
    hobbies = []
    with open("Data/users.csv", encoding='utf-8') as file:
        csv_reader = csv.reader(file)
        hobbies = next(csv_reader)
    # —Å—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –æ—Å—Ç–∞–≤—à–∏–µ—Å—è - –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–±–±–∏
    hobbies = hobbies[1:]

    groups_in_hobby = {hobby: [] for hobby in hobbies}
    with open("Data/users.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        for row in file_reader:
            if row["UserId"] == str(message.chat.id):
                for hobby in hobbies:
                    if len(row[hobby]) != 0:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Ö–æ–±–±–∏ –Ω–µ –ø—É—Å—Ç–æ
                        groups_in_hobby[hobby] = row[hobby].split()
                break

    # —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤ output –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ –≥–∏—Ç–∞—Ä–µ
    descriptions_of_groups_guitar = []
    with open("Data/guitar_lessons.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        for row in file_reader:
            if row["Group"] in groups_in_hobby["guitar"]:
                descriptions_of_groups_guitar.append(f'–ì—Ä—É–ø–ø–∞ ‚Ññ{row["Group"]} '
                                                     f'—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º {row["Teacher"]},\n'
                                                     f'–ó–∞–Ω—è—Ç–∏—è –ø–æ {days[row["Day"]]} '
                                                     f'–≤ {row["Time"]}, '
                                                     f'{row["Fullness"]} –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ (–≤–∫–ª—é—á–∞—è –≤–∞—Å)\n')
    # –ø–æ—Ç–æ–º —Å–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ —Ç–∞–Ω—Ü–∞–º
    descriptions_of_groups_dances = []
    with open("Data/dances_lessons.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        for row in file_reader:
            if row["Group"] in groups_in_hobby["dances"]:
                descriptions_of_groups_dances.append(f'–ì—Ä—É–ø–ø–∞ ‚Ññ{row["Group"]} '
                                                     f'—Å —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–æ–º {row["Choreographer"]},\n'
                                                     f'–ó–∞–Ω—è—Ç–∏—è –ø–æ {days[row["Day"]]} '
                                                     f'–≤ {row["Time"]}, '
                                                     f'{row["Fullness"]} –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ (–≤–∫–ª—é—á–∞—è –≤–∞—Å)\n')
    if len(descriptions_of_groups_guitar) == 0 and len(descriptions_of_groups_dances) == 0:
        output_message = '–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ö–æ–±–±–∏'
    else:
        output_message = '–£ –≤–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ö–æ–±–±–∏:\n\n'
    if len(descriptions_of_groups_guitar) != 0:
        output_message += '–ó–∞–Ω—è—Ç–∏—è –ø–æ –≥–∏—Ç–∞—Ä–µ:\n' + ''.join(descriptions_of_groups_guitar) + '\n'
    if len(descriptions_of_groups_dances) != 0:
        output_message += '–ó–∞–Ω—è—Ç–∏—è –ø–æ —Ç–∞–Ω—Ü–∞–º:\n' + ''.join(descriptions_of_groups_dances) + '\n'
    bot.send_message(message.chat.id, output_message, parse_mode='html')


def choose_hobby_handler(message):
    setState(message.chat.id, 'choose_hobby')

    choose_hobby_menu = telebot.types.ReplyKeyboardMarkup(True, True)
    choose_hobby_menu.row('üé∏–ó–∞–Ω—è—Ç–∏—è –Ω–∞ –≥–∏—Ç–∞—Ä–µüé∏')
    choose_hobby_menu.row('üíÉ–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π –∫—Ä—É–∂–æ–∫üï∫')
    choose_hobby_menu.row('/help')

    bot.send_message(message.chat.id,
                     f'–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–±–±–∏\n',
                     parse_mode='html', reply_markup=choose_hobby_menu)


def make_an_appointment_with_doctor_handler(message):
    setState(message.chat.id, 'choose_doctor')

    choose_doctor_menu = telebot.types.ReplyKeyboardMarkup(True, True)
    choose_doctor_menu.row('–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥')
    choose_doctor_menu.row('–ü–µ–¥–∏–∞—Ç—Ä')
    choose_doctor_menu.row('/help')

    bot.send_message(message.chat.id,
                     f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–∞—á–∞\n',
                     parse_mode='html', reply_markup=choose_doctor_menu)


def choose_guitar_group(message):
    setState(message.chat.id, 'choose_guitar_group')

    # —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç
    guitar_groups_already = []
    with open("Data/users.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        user_id = str(message.chat.id)

        for row in file_reader:
            if row["UserId"] == user_id:
                guitar_groups_already = row["guitar"].split(' ')
                break

    # —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∑–∞—á–∏—Å–ª–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with open("Data/guitar_lessons.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        descriptions_of_groups = []
        groups = []
        for row in file_reader:
            # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
            fullness = list(map(int, row["Fullness"].split('/')))
            if fullness[0] >= fullness[1]:
                # –µ—Å–ª–∏ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –¥–æ "/" –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª—é–¥–µ–π –ø–æ—Å–ª–µ "/", —Ç.–µ. –≥—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
                continue
            # –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
            if row["Group"] in guitar_groups_already:
                continue
            descriptions_of_groups.append(f'–ì—Ä—É–ø–ø–∞ ‚Ññ{row["Group"]} '
                                          f'—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º {row["Teacher"]},\n'
                                          f'–ó–∞–Ω—è—Ç–∏—è –ø–æ {days[row["Day"]]} '
                                          f'–≤ {row["Time"]}, '
                                          f'{row["Fullness"]} –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ\n')
            groups.append(f'–ì—Ä—É–ø–ø–∞ ‚Ññ{row["Group"]}')

    if len(groups) == 0:
        setState(message.chat.id, 'home')
        bot.send_message(message.chat.id,
                         f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.\n'
                         f'–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö, –ª–∏–±–æ –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Ç –º–µ—Å—Ç',
                         parse_mode='html', reply_markup=create_home_menu())
    else:
        buttons = telebot.types.InlineKeyboardMarkup()
        for group in groups:
            buttons.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f'{group[8:]} {message.chat.id}'))
        bot.send_message(message.chat.id,
                         f'–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≥—Ä—É–ø–ø—É.\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n\n' +
                         '\n'.join(descriptions_of_groups),
                         parse_mode='html', reply_markup=buttons)


def edit_a_group_guitar(number_of_group, user_id, mode):
    # mode - 'add'/'remove' - –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ –Ω–µ–µ

    # –ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ hobbies (–¥–æ–∑–∞–ø–∏—Å—å/—É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    with open("Data/users.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        for row in file_reader:
            if row["UserId"] == user_id:
                old_guitar_groups = row["guitar"].split()
                if mode == 'add':
                    new_guitar_groups = sorted(old_guitar_groups + [number_of_group])
                elif mode == 'remove':
                    new_guitar_groups = old_guitar_groups.copy()
                    new_guitar_groups.remove(number_of_group)
                update_csv_cell("Data/users.csv",
                                "guitar",
                                file_reader.line_num - 2,
                                ' '.join(new_guitar_groups))
                break

    # –ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ guitar lessons (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ)
    with open("Data/guitar_lessons.csv", encoding='utf-8') as file:
        file_reader = csv.DictReader(file, delimiter=",")
        for row in file_reader:
            if row["Group"] == number_of_group:
                old_fullness = row["Fullness"].split('/')
                if mode == 'add':
                    new_fullness = [str(int(old_fullness[0]) + 1), old_fullness[1]]
                elif mode == 'remove':
                    new_fullness = [str(int(old_fullness[0]) - 1), old_fullness[1]]
                update_csv_cell("Data/guitar_lessons.csv",
                                "Fullness",
                                file_reader.line_num - 2,
                                '/'.join(new_fullness))
                break

    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "home"
    setState(user_id, 'home')
    message = (f'–í—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É' if mode == 'add' else f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã') + f' ‚Ññ{number_of_group}\n'
    bot.send_message(user_id,
                     message,
                     parse_mode='html', reply_markup=create_home_menu())


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    call.data = call.data.split()
    match getState(call.data[1]):
        case 'choose_guitar_group':
            edit_a_group_guitar(call.data[0], call.data[1], 'add')
        case 'refuse_guitar_group':
            edit_a_group_guitar(call.data[0], call.data[1], 'remove')


def main():
    bot.infinity_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
